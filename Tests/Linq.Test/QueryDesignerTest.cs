using System;
using System.Collections;
using System.Collections.Generic;
using System.Configuration;
using System.Data;
using System.Linq.Dynamic;
using System.Data.SqlClient;
using System.Linq;
using LinqNorthwind.Entities;
using NUnit.Framework;
using Spolty.Framework.Designers;
using Spolty.Framework.Parameters.Conditionals;
using Spolty.Framework.Parameters.Conditionals.Enums;
using Spolty.Framework.Parameters.Joins;
using Spolty.Framework.Parameters.Joins.Enums;
using Spolty.Framework.Parameters.Orderings;
using Spolty.Framework.Parameters.Orderings.Enums;

namespace Linq.Test
{
    [TestFixture]
    public class QueryDesignerTest
    {
        private readonly NorthwindDataContext context = new NorthwindDataContext(ConnectionString.ConnectionString);
        private readonly SqlConnection _connection = new SqlConnection(ConnectionString.ConnectionString);

        private static ConnectionStringSettings ConnectionString
        {
            get { return ConfigurationManager.ConnectionStrings["NorthwindConnectionString"]; }
        }

        ~QueryDesignerTest()
        {
            if (context != null)
            {
                context.Dispose();
            }

            if (_connection != null)
            {
                _connection.Dispose();
            }
        }

        private void CheckDataWithExecuteReaderResult(string commandText, int resultRowCount, List<Product> rsultList)
        {
            try
            {
                int[] productIdArray = rsultList.Select(product => product.ProductID).ToArray();
                using (IDbCommand command = new SqlCommand(commandText, _connection))
                {
                    _connection.Open();
                    IDataReader reader = command.ExecuteReader();

                    int count = 0;
                    while (reader.Read())
                    {
                        count++;
                        Assert.Contains(Convert.ToInt32(reader["ProductID"]), productIdArray);
                    }
                    // check numbers of entity
                    Assert.AreEqual(resultRowCount, count);
                }
            }
            finally
            {
                if (_connection != null)
                {
                    _connection.Close();
                }
            }
        }

        /// <summary>
        ///  Query created in Microsoft SQL Server Management Studio
        ///  
        ///   SELECT     Products.ProductID, Products.ProductName, Products.SupplierID, Products.CategoryID, Products.QuantityPerUnit, Products.UnitPrice, Products.UnitsInStock, Products.UnitsOnOrder, Products.ReorderLevel, Products.Discontinued
        ///   FROM       Products  INNER JOIN Categories
        /// 		        ON Products.CategoryID = Categories.CategoryID
        /// 		
        ///   result of that script it's 77 rows that why I test row count equal 77
        ///   
        ///  Query generated by QueryDesigner
        ///  
        ///  SELECT [t0].[ProductID], [t0].[ProductName], [t0].[SupplierID], [t0].[CategoryID], [t0].[QuantityPerUnit], [t0].[UnitPrice], [t0].[UnitsInStock], [t0].[UnitsOnOrder], [t0].[ReorderLevel], [t0].[Discontinued]
        ///  FROM [dbo].[Products] AS [t0] INNER JOIN [dbo].[Categories] AS [t1] 
        ///       ON [t0].[CategoryID] = [t1].[CategoryID]
        /// </summary>
        [Test]
        public void TestJoinWithOneChild()
        {
            const int resultRowCount = 77;
            //create root node
            var root = new JoinNode(typeof (Product));

            // add child node Category with propertyName "Products". 
            // Because Category linked with Product by next property:
            // public EntitySet<Product> Products 
            root.AddChildren(new JoinNode(typeof (Category),  "Category", "Products"));

            var queryDesinger = new QueryDesigner(context, root);
            var list = new List<Product>(queryDesinger.Cast<Product>());

            // check numbers of entity
            Assert.AreEqual(resultRowCount, list.Count);

            string query =
                @"SELECT ProductID FROM Products INNER JOIN Categories ON Products.CategoryID = Categories.CategoryID";

            CheckDataWithExecuteReaderResult(query, resultRowCount, list);
        }

        [Test]
        public void TestJoinWithOneChildByAssociationFileds()
        {
            const int resultRowCount = 77;
            //create root node
            var root = new JoinNode(typeof(Product));

            // add child node Category with propertyName "Products". 
            // Because Category linked with Product by next property:
            // public EntitySet<Product> Products 
            root.AddChildren(new JoinNode(typeof(Category), new[] { "CategoryID" }, new[] { "CategoryID" }));

            var queryDesinger = new QueryDesigner(context, root);
            var list = new List<Product>(queryDesinger.Cast<Product>());

            // check numbers of entity
            Assert.AreEqual(resultRowCount, list.Count);

            string query =
                @"SELECT ProductID FROM Products INNER JOIN Categories ON Products.CategoryID = Categories.CategoryID";

            CheckDataWithExecuteReaderResult(query, resultRowCount, list);
        }

        /// <summary>
        ///  Query created in Microsoft SQL Server Management Studio
        /// 
        ///  SELECT     Products.* 
        ///  FROM       Products  INNER JOIN Categories
        ///              ON Products.CategoryID = Categories.CategoryID
        ///  WHERE Categories.CategoryName = N'Condiments'
        ///  
        /// result of that script it's 12 rows that why I test row count equal 12
        /// 
        /// Query generated by QueryDesigner
        /// 
        /// exec sp_executesql N'SELECT [t0].[ProductID], [t0].[ProductName], [t0].[SupplierID], [t0].[CategoryID], [t0].[QuantityPerUnit], [t0].[UnitPrice], [t0].[UnitsInStock], [t0].[UnitsOnOrder], [t0].[ReorderLevel], [t0].[Discontinued]
        /// FROM [dbo].[Products] AS [t0] INNER JOIN [dbo].[Categories] AS [t1] 
        ///              ON [t0].[CategoryID] = [t1].[CategoryID]
        /// WHERE [t1].[CategoryName] = @p0',N'@p0 nvarchar(10)',@p0=N'Condiments'
        /// </summary>
        [Test]
        public void TestJoinWithOneChildAndFilteredByCategoryNameV1()
        {
            const string categoryName = "Condiments";
            const int resultRowCount = 12;
            //create root node
            var root = new JoinNode(typeof (Product));

            // add child node Category with propertyName "Products". 
            // Because Category linked with Product by next property:
            // public EntitySet<Product> Products 
            var categoryNode = new JoinNode(typeof (Category),  "Category", "Products");
            root.AddChildren(categoryNode);

            // add condition for filtering by CategoryName == "Condiments"
            categoryNode.AddConditions(new Condition("CategoryName", categoryName));

            var queryDesinger = new QueryDesigner(context, root);
            var list = new List<Product>(queryDesinger.Cast<Product>());
            Assert.AreEqual(resultRowCount, list.Count);

            string query =
                @"SELECT ProductID FROM Products INNER JOIN Categories ON Products.CategoryID = Categories.CategoryID 
WHERE Categories.CategoryName = N'Condiments'";

            CheckDataWithExecuteReaderResult(query, resultRowCount, list);
        }

        /// <summary>
        ///  Query created in Microsoft SQL Server Management Studio
        /// 
        ///  SELECT     Products.* 
        ///  FROM       Products  INNER JOIN Categories
        ///              ON Products.CategoryID = Categories.CategoryID
        ///  WHERE Categories.CategoryName = N'Condiments'
        ///  
        /// result of that script it's 12 rows that why I test row count equal 12
        /// 
        /// Query generated by QueryDesigner
        /// 
        /// exec sp_executesql N'SELECT [t0].[ProductID], [t0].[ProductName], [t0].[SupplierID], [t0].[CategoryID], [t0].[QuantityPerUnit], [t0].[UnitPrice], [t0].[UnitsInStock], [t0].[UnitsOnOrder], [t0].[ReorderLevel], [t0].[Discontinued]
        /// FROM [dbo].[Products] AS [t0] INNER JOIN [dbo].[Categories] AS [t1] 
        ///              ON [t0].[CategoryID] = [t1].[CategoryID]
        /// WHERE [t1].[CategoryName] = @p0',N'@p0 nvarchar(10)',@p0=N'Condiments'
        /// </summary>
        [Test]
        public void TestJoinWithOneChildAndFilteredByCategoryNameV2()
        {
            const string categoryName = "Condiments";
            const int resultRowCount = 12;
            //create root node
            var root = new JoinNode(typeof (Product));

            // add child node Category with propertyName "Products". 
            // Because Category linked with Product by next property:
            // public EntitySet<Product> Products 
            var categoryNode = new JoinNode(typeof(Category),  "Category", "Products");
            root.AddChildren(categoryNode);

            var queryDesinger = new QueryDesigner(context, root);
            // add condition for filtering by CategoryName == "Condiments"

            queryDesinger = queryDesinger.Where(new Condition("CategoryName", categoryName, ConditionOperator.EqualTo,
                                                      typeof (Category)));
            var list = new List<Product>(queryDesinger.Cast<Product>());
            Assert.AreEqual(resultRowCount, list.Count);

            string query =
                @"SELECT ProductID FROM Products INNER JOIN Categories ON Products.CategoryID = Categories.CategoryID
WHERE Categories.CategoryName = N'Condiments'";

            CheckDataWithExecuteReaderResult(query, resultRowCount, list);
        }

        /// <summary>
        ///  Query created in Microsoft SQL Server Management Studio
        /// 
        ///  SELECT     Products.* 
        ///  FROM       Products  INNER JOIN Categories
        ///              ON Products.CategoryID = Categories.CategoryID
        ///  WHERE Products.ProductName like N'Louisiana%' AND Categories.CategoryName = N'Condiments'
        ///  
        /// result of that script it's 12 rows that why I test row count equal 12
        /// 
        /// Query generated by QueryDesigner
        /// 
        /// exec sp_executesql N'SELECT [t0].[ProductID], [t0].[ProductName], [t0].[SupplierID], [t0].[CategoryID], [t0].[QuantityPerUnit], [t0].[UnitPrice], [t0].[UnitsInStock], [t0].[UnitsOnOrder], [t0].[ReorderLevel], [t0].[Discontinued]
        /// FROM [dbo].[Products] AS [t0] INNER JOIN [dbo].[Categories] AS [t1] 
        ///              ON [t0].[CategoryID] = [t1].[CategoryID]
        /// WHERE [t1].[CategoryName] = @p0',N'@p0 nvarchar(10)',@p0=N'Condiments'
        /// </summary>
        [Test]
        public void TestJoinWithOneChildAndFilteredByProductNameAndCategoryNameV1()
        {
            const string productName = "Louisiana";
            const string categoryName = "Condiments";
            const int resultRowCount = 2;
            //create root node
            var root = new JoinNode(typeof (Product));

            // add child node Category with propertyName "Products". 
            // Because Category linked with Product by next property:
            // public EntitySet<Product> Products 
            var categoryNode = new JoinNode(typeof(Category),  "Category", "Products");
            root.AddChildren(categoryNode);

            var queryDesinger = new QueryDesigner(context, root);

            // add condition for filtering by ProductName Like "Louisiana%"
            var product = new Condition("ProductName", productName, ConditionOperator.StartsWith);

            // add condition for filtering by CategoryName == "Condiments"
            var categoryCondition = new Condition("CategoryName", categoryName, ConditionOperator.EqualTo,
                                                  typeof (Category));

            queryDesinger = queryDesinger.Where(new ConditionList(product, categoryCondition));
            var list = new List<Product>(queryDesinger.Cast<Product>());
            Assert.AreEqual(resultRowCount, list.Count);

            string query =
                @"SELECT ProductID FROM Products INNER JOIN Categories ON Products.CategoryID = Categories.CategoryID
WHERE Products.ProductName like N'Louisiana%' AND Categories.CategoryName = N'Condiments'";

            CheckDataWithExecuteReaderResult(query, resultRowCount, list);
        }

        /// <summary>
        ///  Query created in Microsoft SQL Server Management Studio
        ///  
        ///   SELECT     Products.* 
        ///   FROM       Products  INNER JOIN Categories
        ///               ON Products.CategoryID = Categories.CategoryID
        ///   WHERE Products.ProductName like N'Louisiana%' AND Categories.CategoryName = N'Condiments'
        ///   
        ///  result of that script it's 2 rows that why I test row count equal 2
        ///  
        ///  Query generated by QueryDesigner
        ///  
        ///  exec sp_executesql N'SELECT [t0].[ProductID], [t0].[ProductName], [t0].[SupplierID], [t0].[CategoryID], [t0].[QuantityPerUnit], [t0].[UnitPrice], [t0].[UnitsInStock], [t0].[UnitsOnOrder], [t0].[ReorderLevel], [t0].[Discontinued]
        ///  FROM [dbo].[Products] AS [t0] INNER JOIN [dbo].[Categories] AS [t1] 
        ///               ON [t0].[CategoryID] = [t1].[CategoryID]
        ///  WHERE ([t0].[ProductName] LIKE @p0) AND ([t1].[CategoryName] = @p1)',N'@p0 nvarchar(10),@p1 nvarchar(10)',@p0=N'Louisiana%',@p1=N'Condiments'
        ///  </summary>
        [Test]
        public void TestJoinWithOneChildAndFilteredByProductNameAndCategoryNameV2()
        {
            const string productName = "Louisiana";
            const string categoryName = "Condiments";
            const int resultRowCount = 2;
            //create root node
            var root = new JoinNode(typeof (Product));

            // add condition for filtering by ProductName Like "Louisiana%"
            root.AddConditions(new Condition("ProductName", productName, ConditionOperator.StartsWith));

            // add child node Category with propertyName "Products". 
            // Because Category linked with Product by next property:
            // public EntitySet<Product> Products 
            var categoryNode = new JoinNode(typeof(Category),  "Category", "Products");
            root.AddChildren(categoryNode);

            // add condition for filtering by CategoryName == "Condiments"
            categoryNode.AddConditions(new Condition("CategoryName", categoryName));

            var queryDesinger = new QueryDesigner(context, root);
            var list = new List<Product>(queryDesinger.Cast<Product>());
            Assert.AreEqual(resultRowCount, list.Count);

            string query =
                @"SELECT ProductID FROM Products INNER JOIN Categories ON Products.CategoryID = Categories.CategoryID
WHERE Products.ProductName like N'Louisiana%' AND Categories.CategoryName = N'Condiments'";

            CheckDataWithExecuteReaderResult(query, resultRowCount, list);
        }

        /// <summary>
        ///  Query created in Microsoft SQL Server Management Studio
        ///  
        ///   SELECT     Products.*
        ///   FROM       Products  INNER JOIN Categories
        /// 		        ON Products.CategoryID = Categories.CategoryID
        /// 		
        ///   result of that script it's 77 rows that why I test row count equal 77
        ///   
        ///  Query generated by QueryDesigner
        ///  
        ///  SELECT [t0].[ProductID], [t0].[ProductName], [t0].[SupplierID], [t0].[CategoryID], [t0].[QuantityPerUnit], [t0].[UnitPrice], [t0].[UnitsInStock], [t0].[UnitsOnOrder], [t0].[ReorderLevel], [t0].[Discontinued]
        ///  FROM [dbo].[Products] AS [t0] INNER JOIN [dbo].[Categories] AS [t1] 
        ///       ON [t0].[CategoryID] = [t1].[CategoryID]
        /// </summary>
        [Test]
        public void TestJoinWithOneChildSkipAndTake()
        {
            const int resultRowCount = 10;
            //create root node
            var root = new JoinNode(typeof (Product));

            // add child node Category with propertyName "Products". 
            // Because Category linked with Product by next property:
            // public EntitySet<Product> Products 
            var categoryNode = new JoinNode(typeof(Category),  "Category", "Products");
            root.AddChildren(categoryNode);

            var queryDesinger = new QueryDesigner(context, typeof(Product));
            var parameteres = new OrderingList(new Ordering("ProductName", typeof (Product)),
                                                        new Ordering("CategoryName", SortDirection.Descending,
                                                                     typeof (Category)));
            queryDesinger = queryDesinger.Join(root,
                                               parameteres)
                                            .Skip(10).Take(10);
            var list = new List<Product>(queryDesinger.Cast<Product>());
            Assert.AreEqual(resultRowCount, list.Count);
        }

        /// <summary>
        /// Query created in Microsoft SQL Server Management Studio
        /// 
        /// SELECT   DISTINCT  Products.ProductID, Products.ProductName, Products.SupplierID, Products.CategoryID, Products.QuantityPerUnit, Products.UnitPrice, Products.UnitsInStock, Products.UnitsOnOrder, Products.ReorderLevel, Products.Discontinued
        /// FROM         Products 
        ///         INNER JOIN Categories ON Products.CategoryID = Categories.CategoryID 
        ///         INNER JOIN [Order Details] ON Products.ProductID = [Order Details].ProductID
        /// WHERE   [Order Details].Discount > 0.15   
        ///         AND ((Products.ProductName LIKE N'Louisiana%') OR (Categories.CategoryName = N'Condiments'))
        ///  
        /// result of that script it's 9 rows that why I test row count equal 9
        /// 
        /// Query generated by QueryDesigner
        /// 
        /// exec sp_executesql N'SELECT DISTINCT [t0].[ProductID], [t0].[ProductName], [t0].[SupplierID], [t0].[CategoryID], [t0].[QuantityPerUnit], [t0].[UnitPrice], [t0].[UnitsInStock], [t0].[UnitsOnOrder], [t0].[ReorderLevel], [t0].[Discontinued] 
        /// FROM [dbo].[Products] AS [t0]
        ///         INNER JOIN [dbo].[Categories] AS [t1] ON [t0].[CategoryID] = [t1].[CategoryID]
        ///         INNER JOIN [dbo].[Order Details] AS [t2] ON [t0].[ProductID] = [t2].[ProductID]
        /// WHERE ([t2].[Discount] > @p0) AND (([t0].[ProductName] LIKE @p1) OR ([t1].[CategoryName] = @p2))',N'@p0 real,@p1 nvarchar(10),@p2 nvarchar(10)',@p0=0,15,@p1=N'Louisiana%',@p2=N'Condiments'* 
        /// </summary>
        [Test]
        public void TestJoinWithTwoChildrenAndComplicatedFilterAndDistincted()
        {
            const string productName = "Louisiana";
            const string categoryName = "Condiments";
            const int resultRowCount = 9;
            //create root node
            var root = new JoinNode(typeof (Product));

            // add first child node Category with propertyName "Products". 
            // Because Category linked with Product by next property:
            // public EntitySet<Product> Products 
            var categoryNode = new JoinNode(typeof (Category));
            root.AddChildren(categoryNode);

            // add second child node Order_Detail. PropertyName not defined
            // because Order_Detail linked with Product by next property:
            // public Product Product - name of property is equal name of type 
            var orderDetailNode = new JoinNode(typeof (Order_Detail));

            root.AddChildren(orderDetailNode);

            var queryDesinger = new QueryDesigner(context, root);

            // create conditions for filtering by ProductName Like "Louisiana%" Or CategoryName == "Condiments"
            var productCondition = new Condition("ProductName", productName, ConditionOperator.StartsWith,
                                                 typeof (Product));
            var categoryCondition = new Condition("CategoryName", categoryName, ConditionOperator.EqualTo,
                                                  typeof (Category));
            var orCondition = new OrCondition(productCondition, categoryCondition);

            // create condition for filtering by [Order Details].Discount > 0.15
            var discountCondition = new Condition("Discount", 0.15F, ConditionOperator.GreaterThan,
                                                  typeof (Order_Detail));

            var conditionals = new ConditionList(orCondition, discountCondition);

            // assign conditions
            queryDesinger = queryDesinger.Where(conditionals);

            // make Distinct
            IQueryable<Product> distictedProducts = queryDesinger.Distinct().Cast<Product>();

            var list = new List<Product>(distictedProducts);
            Assert.AreEqual(resultRowCount, list.Count);

            string query =
                @" SELECT   DISTINCT  Products.ProductID, Products.ProductName, Products.SupplierID, Products.CategoryID, Products.QuantityPerUnit, Products.UnitPrice, Products.UnitsInStock, Products.UnitsOnOrder, Products.ReorderLevel, Products.Discontinued
                           FROM         Products 
                                   INNER JOIN Categories ON Products.CategoryID = Categories.CategoryID 
                                   INNER JOIN [Order Details] ON Products.ProductID = [Order Details].ProductID
                           WHERE   [Order Details].Discount > 0.15   
                                   AND ((Products.ProductName LIKE N'Louisiana%') OR (Categories.CategoryName = N'Condiments'))";

            CheckDataWithExecuteReaderResult(query, resultRowCount, list);
        }

        /// <summary>
        /// Query created in Microsoft SQL Server Management Studio
        /// 
        /// SELECT   DISTINCT  Products.ProductID, Products.ProductName, Products.SupplierID, Products.CategoryID, Products.QuantityPerUnit, Products.UnitPrice, Products.UnitsInStock, Products.UnitsOnOrder, Products.ReorderLevel, Products.Discontinued
        /// FROM         Products 
        ///         INNER JOIN Categories ON Products.CategoryID = Categories.CategoryID 
        ///         INNER JOIN [Order Details] ON Products.ProductID = [Order Details].ProductID
        /// WHERE   [Order Details].Discount > 0.15   
        ///         AND ((Products.ProductName LIKE N'Louisiana%') OR (Categories.CategoryName = N'Condiments'))
        ///  
        /// result of that script it's 9 rows that why I test row count equal 9
        /// 
        /// Query generated by QueryDesigner
        /// 
        /// exec sp_executesql N'SELECT DISTINCT [t0].[ProductID], [t0].[ProductName], [t0].[SupplierID], [t0].[CategoryID], [t0].[QuantityPerUnit], [t0].[UnitPrice], [t0].[UnitsInStock], [t0].[UnitsOnOrder], [t0].[ReorderLevel], [t0].[Discontinued]
        /// FROM [dbo].[Products] AS [t0]
        ///     INNER JOIN [dbo].[Categories] AS [t1] ON [t0].[CategoryID] = [t1].[CategoryID] 
        ///     INNER JOIN [dbo].[Order Details] AS [t2] ON [t0].[ProductID] = [t2].[ProductID] 
        ///     LEFT OUTER JOIN [dbo].[Categories] AS [t3] ON [t3].[CategoryID] = [t0].[CategoryID]
        /// WHERE ([t2].[Discount] > @p0) AND (([t0].[ProductName] LIKE @p1) OR ([t1].[CategoryName] = @p2))',
        /// N'@p0 real,@p1 nvarchar(10),@p2 nvarchar(10)',@p0=0,15,@p1=N'Louisiana%',@p2=N'Condiments'
        /// </summary>
        [Test]
        public void TestJoinWithTwoChildrenAndComplicatedFilterAndOrderings()
        {
            const string productName = "Louisiana";
            const string categoryName = "Condiments";
            const int resultRowCount = 9;
            //create root node
            var root = new JoinNode(typeof (Product));

            // add first child node Category with propertyName "Products". 
            // Because Category linked with Product by next property:
            // public EntitySet<Product> Products 
            var categoryNode = new JoinNode(typeof (Category));
            root.AddChildren(categoryNode);

            // add second child node Order_Detail. PropertyName not defined
            // because Order_Detail linked with Product by next property:
            // public Product Product - name of property is equal name of type 
            var orderDetailNode = new JoinNode(typeof (Order_Detail));

            root.AddChildren(orderDetailNode);

            var queryDesinger = new QueryDesigner(context, root);

            // create conditions for filtering by ProductName Like "Louisiana%" Or CategoryName == "Condiments"
            var productCondition = new Condition("ProductName", productName, ConditionOperator.StartsWith,
                                                 typeof (Product));
            var categoryCondition = new Condition("CategoryName", categoryName, ConditionOperator.EqualTo,
                                                  typeof (Category));
            var orCondition = new OrCondition(productCondition, categoryCondition);

            // create condition for filtering by [Order Details].Discount > 0.15
            var discountCondition = new Condition("Discount", 0.15F, ConditionOperator.GreaterThan,
                                                  typeof (Order_Detail));

            var conditionals = new ConditionList(orCondition, discountCondition);

            // assign conditions
            queryDesinger = queryDesinger.Where(conditionals);

            // make Distinct
            queryDesinger = queryDesinger.Distinct();

            // make orderings by ProductName and CategoryName
            var productNameOrder = new Ordering("ProductName", SortDirection.Ascending, typeof (Product));
            var categoryNameOrder = new Ordering("CategoryName", SortDirection.Descending, typeof (Category));

            queryDesinger = queryDesinger.OrderBy(new OrderingList(productNameOrder, categoryNameOrder));

            IQueryable<Product> distictedProducts = queryDesinger.Cast<Product>();

            var list = new List<Product>(distictedProducts);
            Assert.AreEqual(resultRowCount, list.Count);

            string query =
                @" SELECT   DISTINCT  Products.ProductID, Products.ProductName, Products.SupplierID, Products.CategoryID, Products.QuantityPerUnit, Products.UnitPrice, Products.UnitsInStock, Products.UnitsOnOrder, Products.ReorderLevel, Products.Discontinued
                           FROM         Products 
                                   INNER JOIN Categories ON Products.CategoryID = Categories.CategoryID 
                                   INNER JOIN [Order Details] ON Products.ProductID = [Order Details].ProductID
                           WHERE   [Order Details].Discount > 0.15   
                                   AND ((Products.ProductName LIKE N'Louisiana%') OR (Categories.CategoryName = N'Condiments'))";

            CheckDataWithExecuteReaderResult(query, resultRowCount, list);
        }

        /// <summary>
        /// Query created in Microsoft SQL Server Management Studio
        /// 
        /// SELECT  DISTINCT  Products.ProductID, Products.ProductName, Products.SupplierID, Products.CategoryID, Products.QuantityPerUnit, Products.UnitPrice, Products.UnitsInStock, Products.UnitsOnOrder, Products.ReorderLevel, Products.Discontinued 
        /// FROM         Orders 
        ///         INNER JOIN [Order Details] ON Orders.OrderID = [Order Details].OrderID 
        ///             INNER JOIN Products ON [Order Details].ProductID = Products.ProductID 
        ///                 INNER JOIN Employees ON Orders.EmployeeID = Employees.EmployeeID 
        ///                   INNER JOIN EmployeeTerritories ON Employees.EmployeeID = EmployeeTerritories.EmployeeID 
        ///                     INNER JOIN Territories ON EmployeeTerritories.TerritoryID = Territories.TerritoryID 
        ///                       INNER JOIN Region ON Territories.RegionID = Region.RegionID
        ///         LEFT OUTER JOIN Categories ON Products.CategoryID = Categories.CategoryID 
        ///         INNER JOIN Suppliers ON Products.SupplierID = Suppliers.SupplierID
        /// WHERE     (Region.RegionID = 4) AND (Territories.TerritoryDescription like 'Orlando%') AND 
        ///             (Categories.CategoryID IN (4, 5, 6)) 
        ///  
        /// result of that script it's 23 rows that why I test row count equal 23
        /// 
        /// Query generated by QueryDesigner
        /// 
        /// exec sp_executesql N'SELECT DISTINCT [t0].[ProductID], [t0].[ProductName], [t0].[SupplierID], [t0].[CategoryID], [t0].[QuantityPerUnit], [t0].[UnitPrice], [t0].[UnitsInStock], [t0].[UnitsOnOrder], 
        /// [t0].[ReorderLevel], [t0].[Discontinued]
        /// FROM [dbo].[Products] AS [t0]
        /// INNER JOIN ([dbo].[Order Details] AS [t1]
        ///     INNER JOIN ([dbo].[Orders] AS [t2]
        ///         INNER JOIN ([dbo].[Employees] AS [t3]
        ///             INNER JOIN ([dbo].[EmployeeTerritories] AS [t4]
        ///                 INNER JOIN ([dbo].[Territories] AS [t5]
        ///                     INNER JOIN [dbo].[Region] AS [t6] ON [t5].[RegionID] = [t6].[RegionID]) ON [t4].[TerritoryID] = [t5].[TerritoryID]) ON [t3].[EmployeeID] = [t4].[EmployeeID]) ON [t2].[EmployeeID] 
        ///  = [t3].[EmployeeID]) ON [t1].[OrderID] = [t2].[OrderID]) ON [t0].[ProductID] = [t1].[ProductID]
        ///  LEFT OUTER JOIN [dbo].[Categories] AS [t7] ON [t0].[CategoryID] = [t7].[CategoryID]
        ///  INNER JOIN [dbo].[Suppliers] AS [t8] ON [t0].[SupplierID] = [t8].[SupplierID]
        /// WHERE (([t7].[CategoryID] = @p0) OR ([t7].[CategoryID] = @p1) OR ([t7].[CategoryID] = @p2)) AND ([t5].[TerritoryDescription] LIKE @p3) AND ([t6].[RegionID] = @p4)',
        /// N'@p0 int,@p1 int,@p2 int,@p3 nvarchar(8),@p4 int',@p0=4,@p1=6,@p2=5,@p3=N'Orlando%',@p4=4
        /// </summary>
        [Test]
        public void TestComplicatedJoinWithFilters()
        {
            const int regionId = 4;
            const string territoryDescription = "Orlando";
            const int resultRowCount = 23;
            //create root node
            var root = new JoinNode(typeof (Product));

            // add second child node Order_Detail. PropertyName not defined
            // because Order_Detail linked with Product by next property:
            // public Product Product - name of property is equal name of type 
            var orderDetailNode = new JoinNode(typeof(Order_Detail));
            var categoryNode = new JoinNode(typeof (Category), "Category", "Products");
            var categoryLeftNode = new JoinNode(typeof (Category), "Category", "Products", JoinType.LeftOuterJoin);
            var supplierNode = new JoinNode(typeof (Supplier), "Supplier", "Products");
            root.AddChildren(orderDetailNode, categoryNode, supplierNode, categoryLeftNode);

            var orderNode = new JoinNode(typeof (Order));
            orderDetailNode.AddChildren(orderNode);

            var employeeNode = new JoinNode(typeof (Employee));
            orderNode.AddChildren(employeeNode);

            var employeeTerrritoryNode = new JoinNode(typeof (EmployeeTerritory));
            employeeNode.AddChildren(employeeTerrritoryNode);

            var territoryNode = new JoinNode(typeof (Territory));
            employeeTerrritoryNode.AddChildren(territoryNode);

            var regionNode = new JoinNode(typeof (Region));
            territoryNode.AddChildren(regionNode);

            var queryDesinger = new QueryDesigner(context, root);

            // create conditions for filtering by RegionID = 4 and TerritoryDescription like "Orlando%" and (CategoryID == 4 or CategoryID == 5 or CategoryID == 6)
            var regionCondition = new Condition("RegionID", regionId, ConditionOperator.EqualTo, typeof (Region));
            var territoryCondition = new Condition("TerritoryDescription", territoryDescription,
                                                   ConditionOperator.StartsWith, typeof (Territory));
            OrCondition categoryIDsCondition = OrCondition.Create("CategoryID", new object[] {4, 5, 6}, ConditionOperator.EqualTo, typeof(Category));

            var conditionals = new ConditionList(regionCondition, territoryCondition, categoryIDsCondition);

            // assign conditions
            queryDesinger = queryDesinger.Where(conditionals);


            // make Distinct
            IQueryable<Product> distictedProducts = queryDesinger.Distinct().Cast<Product>();

            var list = new List<Product>(distictedProducts);

            foreach (var product in list)
            {
                Console.WriteLine(product.Supplier.CompanyName);
            }
            Assert.AreEqual(resultRowCount, list.Count);

            string query =
                @"SELECT  DISTINCT  Products.ProductID, Products.ProductName, Products.SupplierID, Products.CategoryID, Products.QuantityPerUnit, Products.UnitPrice, Products.UnitsInStock, Products.UnitsOnOrder, Products.ReorderLevel, Products.Discontinued 
                  FROM         Orders 
                          INNER JOIN [Order Details] ON Orders.OrderID = [Order Details].OrderID 
                          INNER JOIN Products ON [Order Details].ProductID = Products.ProductID 
                          INNER JOIN Employees ON Orders.EmployeeID = Employees.EmployeeID 
                          INNER JOIN EmployeeTerritories ON Employees.EmployeeID = EmployeeTerritories.EmployeeID 
                          INNER JOIN Territories ON EmployeeTerritories.TerritoryID = Territories.TerritoryID 
                          INNER JOIN Region ON Territories.RegionID = Region.RegionID
                  WHERE     (Region.RegionID = 4) AND (Territories.TerritoryDescription like 'Orlando%') AND 
                              (Products.CategoryID IN (4, 5, 6)) ";

            CheckDataWithExecuteReaderResult(query, resultRowCount, list);
        }

        [Test]
        public void TestUnion()
        {
            const int resultRowCount = 5;
            // create QueryDesigner with ElementType == Product
            var queryDesinger = new QueryDesigner(context, typeof(Product));

            //create root node which elementType has the same type in queryDesigner
            var root = new JoinNode(typeof(Product));

            // create child node Category with propertyName "Products". 
            // Because Category linked with Product by next property:
            // public EntitySet<Product> Products 
            var categoryNode = new JoinNode(typeof(Category),  "Category", "Products");

            // add categoryNode to root node
            root.AddChildren(categoryNode);

            // create filter by Product.ProductName like "%l%"
            var productNameCondition = new Condition("ProductName", "l", ConditionOperator.Like);
            // create filter by Category.Description like "Sweet%"
            var categoryNameCondition = new Condition("Description", "Sweet", ConditionOperator.StartsWith, typeof(Category));

            // create condition list with already created conditions
            var conditionList = new ConditionList(productNameCondition, categoryNameCondition);

            // make join Product table with Category filtered by conditions 
            // and ordered by already created ordering
            queryDesinger = queryDesinger.Join(root, conditionList);

            QueryDesigner cloneQueryDesigner = (QueryDesigner) queryDesinger.Clone();

            queryDesinger = queryDesinger.Skip(0).Take(3);
            cloneQueryDesigner = cloneQueryDesigner.Skip(2).Take(4);

            queryDesinger = queryDesinger.Union(cloneQueryDesigner);

            var list = new List<Product>(queryDesinger.Cast<Product>());
            Assert.AreEqual(resultRowCount, list.Count);
        }

        [Test]
        public void TestExcept()
        {
            const int resultRowCount = 2;
            // create QueryDesigner with ElementType == Product
            var queryDesinger = new QueryDesigner(context, typeof(Product));

            //create root node which elementType has the same type in queryDesigner
            var root = new JoinNode(typeof(Product));

            // create child node Category with propertyName "Products". 
            // Because Category linked with Product by next property:
            // public EntitySet<Product> Products 
            var categoryNode = new JoinNode(typeof(Category),  "Category", "Products");

            // add categoryNode to root node
            root.AddChildren(categoryNode);

            // create filter by Product.ProductName like "%l%"
            var productNameCondition = new Condition("ProductName", "l", ConditionOperator.Like);
            // create filter by Category.Description like "Sweet%"
            var categoryNameCondition = new Condition("Description", "Sweet", ConditionOperator.StartsWith, typeof(Category));

            // create condition list with already created conditions
            var conditionList = new ConditionList(productNameCondition, categoryNameCondition);

            // make join Product table with Category filtered by conditions 
            // and ordered by already created ordering
            queryDesinger = queryDesinger.Join(root, conditionList);

            QueryDesigner cloneQueryDesigner = (QueryDesigner)queryDesinger.Clone();

            queryDesinger = queryDesinger.Skip(0).Take(3);
            cloneQueryDesigner = cloneQueryDesigner.Skip(2).Take(4);

            queryDesinger = queryDesinger.Except(cloneQueryDesigner);

            var list = new List<Product>(queryDesinger.Cast<Product>());
            Assert.AreEqual(resultRowCount, list.Count);
        }
        
        [Test]
        public void TestFirst()
        {
            // create QueryDesigner with ElementType == Product
            var queryDesinger = new QueryDesigner(context, typeof(Product));

            //create root node which elementType has the same type in queryDesigner
            var root = new JoinNode(typeof(Product));

            // create child node Category with propertyName "Products". 
            // Because Category linked with Product by next property:
            // public EntitySet<Product> Products 
            var categoryNode = new JoinNode(typeof(Category),  "Category", "Products");

            // add categoryNode to root node
            root.AddChildren(categoryNode);

            // create filter by Product.ProductName like "%l%"
            var productNameCondition = new Condition("ProductName", "l", ConditionOperator.Like);
            // create filter by Category.Description like "Sweet%"
            var categoryNameCondition = new Condition("Description", "Sweet", ConditionOperator.StartsWith, typeof(Category));

            // create condition list with already created conditions
            var conditionList = new ConditionList(productNameCondition, categoryNameCondition);

            // make join Product table with Category filtered by conditions 
            // and ordered by already created ordering
            queryDesinger.Join(root, conditionList);

            object first = queryDesinger.First();

            Assert.IsInstanceOfType(typeof(Product), first);
        }

        [Test]
        public void TestFirstOrDefault()
        {
            // create QueryDesigner with ElementType == Product
            var queryDesinger = new QueryDesigner(context, typeof(Product));

            //create root node which elementType has the same type in queryDesigner
            var root = new JoinNode(typeof(Product));

            // create child node Category with propertyName "Products". 
            // Because Category linked with Product by next property:
            // public EntitySet<Product> Products 
            var categoryNode = new JoinNode(typeof(Category),  "Category", "Products");

            // add categoryNode to root node
            root.AddChildren(categoryNode);

            // create filter by Product.ProductName like "%l%"
            var productNameCondition = new Condition("ProductName", "l", ConditionOperator.Like);
            // create filter by Category.Description like "Sweet%"
            var categoryNameCondition = new Condition("Description", "Sweet", ConditionOperator.StartsWith, typeof(Category));

            // create condition list with already created conditions
            var conditionList = new ConditionList(productNameCondition, categoryNameCondition);

            // make join Product table with Category filtered by conditions 
            // and ordered by already created ordering
            queryDesinger.Join(root, conditionList);

            object first = queryDesinger.FirstOrDefault();

            Assert.IsInstanceOfType(typeof(Product), first);
        }

        [Test]
        public void TestCount()
        {
            const int resultRowCount = 77;
            //create root node
            var root = new JoinNode(typeof(Product));

            // add child node Category with propertyName "Products". 
            // Because Category linked with Product by next property:
            // public EntitySet<Product> Products 
            root.AddChildren(new JoinNode(typeof(Category),  "Category", "Products"));

            var queryDesinger = new QueryDesigner(context, root);
            var count = queryDesinger.Count();

            // check numbers of entity
            Assert.AreEqual(resultRowCount, count);
        }

        [Test]
        public void TestAny()
        {
            const bool result = true;
            //create root node
            var root = new JoinNode(typeof(Product));

            // add child node Category with propertyName "Products". 
            // Because Category linked with Product by next property:
            // public EntitySet<Product> Products 
            root.AddChildren(new JoinNode(typeof(Category),  "Category", "Products"));

            var queryDesinger = new QueryDesigner(context, root);
            var any = queryDesinger.Any();

            // check numbers of entity
            Assert.AreEqual(result, any);
        }

        [Test]
        public void TestLeftOuterJoin()
        {
//            var dlo = new DataLoadOptions();
//            dlo.AssociateWith<Category>(c => c.Products.Where(p => p.ProductName.Contains("l")));
//            context.LoadOptions = dlo;
//            var res1 = (from category in context.Categories
//                        select category);
//            foreach (var re in res1)
//            {
//                Console.WriteLine(re.CategoryID + " " + re.Products.Count);
//            }          

//            var res = (from product in context.Products
//                       orderby product.ProductID
//                       select new { product, product.Supplier,
//                                    Order_Details = product.Order_Details.Where(p => p.Quantity > 120)
//                                        .Select(od => new { Order_Detail = od, Order = od.Order })
//                       });
//
//            var queryable = res.ToList();
//            foreach (var list in queryable)
//            {
//                list.product.Order_Details.SetSource(list.Order_Details.Select(od=>od.Order_Detail));
////                foreach (var detail in list.Order_Details)
////                {
////                    detail.Product = list.product;
////                }
//            }
//            foreach (var list in queryable)
//            {
//                var value = list.product.Order_Details.FirstOrDefault();
//                if (value != null)
//                {
//                    Console.WriteLine(value.Quantity + " " + value.Order.ShipCity);
//                }
//            }
//            return;
            const int quantity = 120;

            var root = new JoinNode(typeof(Product));
            var orderDetailNode = new JoinNode(typeof(Order_Detail), "Order_Details", "Product", JoinType.LeftOuterJoin);
            root.AddChildren(orderDetailNode);
            
            // add condition for filtering by CategoryName == "Condiments"
            orderDetailNode.AddConditions(new Condition("Quantity", quantity, ConditionOperator.GreaterThan));

            var orderNode = new JoinNode(typeof (Order), "Order", "Order_Details", JoinType.LeftOuterJoin);
            orderDetailNode.AddChildren(orderNode);

            var supplierNode = new JoinNode(typeof(Supplier), "Supplier", "Products", JoinType.LeftOuterJoin);
            
            root.AddChildren(supplierNode);

            var queryDesinger = new QueryDesigner(context, root);

            var result = queryDesinger.Cast<Product>().ToList();
            foreach (Product list1 in result)
            {
//                Console.WriteLine(list1.product.Supplier.CompanyName);
//                if (list1.product.Order_Details.HasLoadedOrAssignedValues)
                {
                    var value = list1.Order_Details.FirstOrDefault();
                    if (value != null)
                    {
                        Console.WriteLine(value.Quantity + " " + value.Order.ShipCity);
                    }
                }
            }

            context.SubmitChanges();

//            var res = from categories in context.Categories
//                      join product in context.Products on categories equals product.Category into ppp
//                      from p in ppp.DefaultIfEmpty() 
//                      where p.ProductName.Contains("l")
//                      select new { categories/*, Products = ppp.DefaultIfEmpty().Where(p => p.ProductName.Contains("l"))*/ };// new {categories, Products = categories.Products.Where(p => p.ProductName.Contains("l"))});}
//            var resutl = res.ToList();
//
//            foreach (var list1 in resutl)
//            {
//                Console.WriteLine(list1.categories.Products.Count);
//            }
        }

        [Test]
        public void TestComplicatedLeftOuterJoin()
        {
            const int quantity = 120;

            var root = new JoinNode(typeof(Customer));
            var ordersNode = new JoinNode(typeof(Order), "Orders", "Customer", JoinType.LeftOuterJoin);
            root.AddChildren(ordersNode);
            root.AddConditions(new Condition("Address", "Kirchgasse 6"));

            var orderDetailNode = new JoinNode(typeof(Order_Detail), "Order_Details", "Order", JoinType.LeftOuterJoin);
            orderDetailNode.AddConditions(new Condition("Quantity", quantity, ConditionOperator.GreaterThan));

            ordersNode.AddChildren(orderDetailNode);

            var productNode = new JoinNode(typeof(Product), "Product", "Order_Details", JoinType.LeftOuterJoin);
            orderDetailNode.AddChildren(productNode);

            var employeesNode = new JoinNode(typeof(Employee), "Employee", "Orders", JoinType.LeftOuterJoin);
            ordersNode.AddChildren(employeesNode);

            var shippersNode = new JoinNode(typeof(Shipper), "Shipper", "Orders", JoinType.LeftOuterJoin);
            ordersNode.AddChildren(shippersNode);


            var queryDesinger = new QueryDesigner(context, root);

            var query = queryDesinger;
            foreach (Customer value in query)
            {
                var orders = value.Orders.Where(o => o.Order_Details.Count > 0).FirstOrDefault();
                if (orders != null)
                {
                    Console.WriteLine("ShipName: " + orders.ShipName);
                    foreach (var orderDetail in orders.Order_Details)
                    {
                        Console.WriteLine("ProductName: " + orderDetail.Product.ProductName);
                    }
                }
            }
        }

        [Test]
        public void TestAggregateConditionAny()
        {
            const int freight = 0;
            var count = (from customer in context.Customers
                         where customer.Orders.Any(order => order.Freight >= freight)
                         select customer).Count();

            QueryDesigner queryDesigner = new QueryDesigner(context, typeof(Customer));
            ConditionList conditions = new ConditionList(new Condition("Freight", freight, ConditionOperator.GreaterThanOrEqualTo));
            PredicateAggregationCondition predicateAggregationCondition = new AnyCondition("Orders", conditions);
            queryDesigner = queryDesigner.Where(predicateAggregationCondition);

            List<Customer> customers = queryDesigner.Cast<Customer>().ToList();

            Assert.AreEqual(count, customers.Count);

            count = (from customer in context.Customers
                         where !customer.Orders.Any(order => order.Freight >= freight)
                         select customer).Count();

            queryDesigner = new QueryDesigner(context, typeof(Customer));
            conditions = new ConditionList(new Condition("Freight", freight, ConditionOperator.GreaterThanOrEqualTo));
            predicateAggregationCondition = new AnyCondition("Orders", conditions, false);
            queryDesigner = queryDesigner.Where(predicateAggregationCondition);

            customers = queryDesigner.Cast<Customer>().ToList();

            Assert.AreEqual(count, customers.Count);
        }

        [Test]
        public void TestAggregateConditionAll()
        {
            const int freight = 0;
            var count = (from customer in context.Customers
                         where customer.Orders.All(order => order.Freight >= freight)
                         select customer).Count();

            QueryDesigner queryDesigner = new QueryDesigner(context, typeof(Customer));
            ConditionList conditions = new ConditionList(new Condition("Freight", freight, ConditionOperator.GreaterThanOrEqualTo));
            PredicateAggregationCondition predicateAggregationCondition = new AllCondition("Orders", conditions);
            queryDesigner = queryDesigner.Where(predicateAggregationCondition);

            List<Customer> customers = queryDesigner.Cast<Customer>().ToList();

            Assert.AreEqual(count, customers.Count);

            count = (from customer in context.Customers
                     where !customer.Orders.All(order => order.Freight >= freight)
                     select customer).Count();

            queryDesigner = new QueryDesigner(context, typeof(Customer));
            conditions = new ConditionList(new Condition("Freight", freight, ConditionOperator.GreaterThanOrEqualTo));
            predicateAggregationCondition = new AllCondition("Orders", conditions, false);
            queryDesigner = queryDesigner.Where(predicateAggregationCondition);

            customers = queryDesigner.Cast<Customer>().ToList();

            Assert.AreEqual(count, customers.Count);
        }
        
        [Test]
        public void TestAggregateConditionCount()
        {
            const int freight = 10;
            const int firstCountValue = 0;
            var count = (from customer in context.Customers
                         where customer.Orders.Count(order => order.Freight >= freight) > firstCountValue
                         select customer).Count();

            QueryDesigner queryDesigner = new QueryDesigner(context, typeof(Customer));
            ConditionList conditions = new ConditionList(new Condition("Freight", freight, ConditionOperator.GreaterThanOrEqualTo));
            PredicateAggregationCondition predicateAggregationCondition = new CountCondition("Orders", conditions, firstCountValue, ConditionOperator.GreaterThan);
            queryDesigner = queryDesigner.Where(predicateAggregationCondition);

            List<Customer> customers = queryDesigner.Cast<Customer>().ToList();

            Assert.AreEqual(count, customers.Count);

            const int secondCountValue = 5;
            count = (from customer in context.Customers
                     where customer.Orders.Count(order => order.Freight >= freight) <= secondCountValue
                     select customer).Count();

            queryDesigner = new QueryDesigner(context, typeof(Customer));
            conditions = new ConditionList(new Condition("Freight", freight, ConditionOperator.GreaterThanOrEqualTo));
            predicateAggregationCondition = new CountCondition("Orders", conditions, secondCountValue, ConditionOperator.LessThanOrEqualTo);
            queryDesigner = queryDesigner.Where(predicateAggregationCondition);

            customers = queryDesigner.Cast<Customer>().ToList();

            Assert.AreEqual(count, customers.Count);
        }
        
        [Test]
        public void TestAggregateConditionMin()
        {
            const int freight = 10;
            const int firstCountValue = 0;
            var count = (from customer in context.Customers
                         where customer.Orders.Min(order => order.Freight / order.OrderID) > firstCountValue
                         select customer).Count();

            QueryDesigner queryDesigner = new QueryDesigner(context, typeof(Customer));
            ConditionList conditions = new ConditionList(new Condition("Freight", freight, ConditionOperator.GreaterThanOrEqualTo));
            PredicateAggregationCondition predicateAggregationCondition = new CountCondition("Orders", conditions, firstCountValue, ConditionOperator.GreaterThan);
            queryDesigner = queryDesigner.Where(predicateAggregationCondition);

            List<Customer> customers = queryDesigner.Cast<Customer>().ToList();

            Assert.AreEqual(count, customers.Count);

            const int secondCountValue = 5;
            count = (from customer in context.Customers
                     where customer.Orders.Count(order => order.Freight >= freight) <= secondCountValue
                     select customer).Count();

            queryDesigner = new QueryDesigner(context, typeof(Customer));
            conditions = new ConditionList(new Condition("Freight", freight, ConditionOperator.GreaterThanOrEqualTo));
            predicateAggregationCondition = new CountCondition("Orders", conditions, secondCountValue, ConditionOperator.LessThanOrEqualTo);
            queryDesigner = queryDesigner.Where(predicateAggregationCondition);

            customers = queryDesigner.Cast<Customer>().ToList();

            Assert.AreEqual(count, customers.Count);
        }

        [Test]
        public void TestEnumInCondition()
        {
            var count = (from order in context.Orders
                         where order.OrderDate.Value.DayOfWeek == DayOfWeek.Monday
                         select order).Count();

            QueryDesigner queryDesigner = new QueryDesigner(context, typeof(Order));
            ConditionList conditions = new ConditionList(new Condition("OrderDate.Value.DayOfWeek", DayOfWeek.Monday));
            queryDesigner = queryDesigner.Where(conditions);

            var resultCount = queryDesigner.Count();

            Assert.AreEqual(count, resultCount);
        }

    }
}